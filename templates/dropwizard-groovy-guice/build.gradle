buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:0.8"
    }
}

apply plugin: "idea"
apply plugin: "codenarc"
apply plugin: "groovy"
apply plugin: "shadow"

// Run codenarc before the test phase begins
test.dependsOn codenarcMain
test.dependsOn codenarcTest

repositories {
    jcenter()
}

dependencies {
    def groovyVersion = "2.2.1"
    def dropwizardVersion = "0.6.2"
    def guiceVersion = "3.0"

    compile "org.codehaus.groovy:groovy-all:${groovyVersion}"
    compile "com.yammer.dropwizard:dropwizard-core:${dropwizardVersion}"
    compile "com.yammer.dropwizard:dropwizard-client:${dropwizardVersion}"
    compile "com.yammer.dropwizard:dropwizard-auth:${dropwizardVersion}"
    compile "com.yammer.dropwizard:dropwizard-views:${dropwizardVersion}"
    compile "com.google.inject:guice:${guiceVersion}"
    compile "com.fiestacabin.dropwizard.guice:dropwizard-guice:0.6.2"

    testCompile "com.yammer.dropwizard:dropwizard-testing:${dropwizardVersion}"
    testCompile "org.spockframework:spock-core:0.7-groovy-2.0"
    testRuntime "cglib:cglib-nodep:2.2.2" // allows mocking of classes (in addition to interfaces)
    testRuntime "org.objenesis:objenesis:1.2" // allows mocking of classes without default constructor (together with CGLIB)
}

jar {
    manifest {
        attributes "Main-Class": "${mainClass}"
        attributes "Built-Date": new Date() //now
        attributes "Built-By": System.getProperty("user.name")
        attributes "Build-Jdk": System.getProperty("java.version")
        attributes "Implementation-Title": project.name
        attributes "Implementation-Version": project.version
        attributes "Implementation-Vendor-Id": project.group
    }
}

codenarc {
    toolVersion = "0.20"
}
codenarcMain {
    configFile = file("gradle/codenarcMain.groovy")
}
codenarcTest {
    configFile = file("gradle/codenarcTest.groovy")
}

assemble.dependsOn "shadowJar" // Include shadowed jar as part of standard project outputs
shadow {
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"
}

task run(dependsOn: "shadowJar", group: "dropwizard", description: "Run service using dev configuration") << {
    // Grab any dw. properties that are specified on the command line and pass to the Java process (i.e. dw.http.port=8080)
    def props = project.ext.properties.findAll { it.key.startsWith("dw") }
    javaexec {
        main = "-jar"
        args = ["${shadow.shadowJar.getPath()}", "server", "config/dev.yaml"]
        systemProperties = props
    }
}

task runDebug(dependsOn: "shadowJar", group: "dropwizard", description: "Run service with debugging enabled using dev configuration") << {
    // Grab any dw. properties that are specified on the command line and pass to the Java process (i.e. dw.http.port=8080)
    def props = project.ext.properties.findAll { it.key.startsWith("dw") }
    javaexec {
        main = "-jar"
        args = ["${shadow.shadowJar.getPath()}", "server", "config/dev.yaml"]
        systemProperties = props
        debug = true
    }
}
