buildscript {
    repositories {
        jcenter()
        //mavenCentral()
        //maven {
        //    url "http://repo.jfrog.org/artifactory/gradle-plugins"
        //}
        //maven {
        //    name "Gradle Shadow"
        //    url "http://dl.bintray.com/content/johnrengelman/gradle-plugins"
        //}
    }
    dependencies {
        //classpath "net.saliman:gradle-cobertura-plugin:1.1.0"
        //classpath "org.jfrog.buildinfo:build-info-extractor-gradle:2.0.16"
        //classpath "org.gradle.plugins:shadow:0.7.4"
    }
}

//apply plugin: "cobertura"
//apply plugin: "codenarc"
//apply plugin: "groovy"
//apply plugin: "maven"
//apply plugin: "shadow"

// Run code narc before the test phase begins
test.dependsOn codenarcMain

repositories {
    jcenter()
    //mavenCentral()
    // Spock snapshots are available from the Sonatype OSS snapshot repository
    //maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
}

dependencies {
    def groovyVersion = "2.2.1"
    def dropwizardVersion = "0.6.2"

    groovy "org.codehaus.groovy:groovy-all:\${groovyVersion}"

    compile "com.yammer.dropwizard:dropwizard-core:\${dropwizardVersion}"
    compile "com.yammer.dropwizard:dropwizard-testing:\${dropwizardVersion}"
    compile "com.yammer.dropwizard:dropwizard-hibernate:\${dropwizardVersion}"
    compile "com.yammer.dropwizard:dropwizard-migrations:\${dropwizardVersion}"
    compile "com.yammer.dropwizard:dropwizard-auth:\${dropwizardVersion}"
    compile "com.yammer.dropwizard:dropwizard-client:\${dropwizardVersion}"
    compile "com.yammer.dropwizard:dropwizard-views:\${dropwizardVersion}"

    testCompile "com.yammer.dropwizard:dropwizard-testing:\${dropwizardVersion}"
    testCompile "org.spockframework:spock-core:0.7-groovy-2.0"
    testRuntime "cglib:cglib-nodep:2.2.2" // allows mocking of classes (in addition to interfaces)
    testRuntime "org.objenesis:objenesis:1.2" // allows mocking of classes without default constructor (together with CGLIB)
}

jar {
    manifest {
        attributes "Main-Class": "${packageName}.${serviceName}Service"
        attributes "Built-Date": new Date() //now
        attributes "Built-By": System.getProperty("user.name")
        attributes "Build-Jdk": System.getProperty("java.version")
        attributes "Implementation-Title": project.name
        attributes "Implementation-Version": project.version
        attributes "Implementation-Vendor-Id": project.group
    }
}

cobertura {
    coverageFormats = ["xml", "html"]
    coverageIncludes = ["**/*.java", "**/*.groovy"]
    coverageSourceDirs = [sourceSets.main.allSource.srcDirs]
}

codenarc {
    configFile = rootProject.file("codenarcrule.groovy")
    reportFormat = System.properties["codeNarcOutput"] ?: "html"
}

shadow {
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"
}

task run(dependsOn: "shadow", group: "dropwizard", description: "Run service using dev configuration") << {
    // Grab any dw. properties that are specified on the command line and pass to the Java process (i.e. dw.http.port=8080)
    def props = project.ext.properties.findAll { it.key.startsWith("dw") }
    javaexec {
        main = "-jar"
        args = ["\${shadow.shadowJar.getPath()}", "server", "conf/dev.yaml"]
        systemProperties = props
    }
}

task runDebug(dependsOn: "shadow", group: "dropwizard", description: "Run service with debugging enabled using dev configuration") << {
    // Grab any dw. properties that are specified on the command line and pass to the Java process (i.e. dw.http.port=8080)
    def props = project.ext.properties.findAll { it.key.startsWith("dw") }
    javaexec {
        main = "-jar"
        args = ["\${shadow.shadowJar.getPath()}", "server", "conf/dev.yaml"]
        systemProperties = props
        debug = true
    }
}
